\chapter{Arquitecturas de Sistemas de Bases de Datos Distribuidos}

\section{Arquitecturas Cliente-Servidor}

En las arquitecturas cliente-servidor para sistemas de bases de datos distribuidas, la funcionalidad se divide entre dos tipos de componentes principales: los servidores de bases de datos y los clientes. Esta división permite la gestión distribuida de los datos y el acceso a ellos a través de una red.

\begin{itemize}
    \item \textbf{Servidores de bases de datos distribuidos}: Estos servidores son los encargados de gestionar una parte específica de la base de datos distribuida. Cada servidor puede almacenar y administrar datos localmente, aplicar políticas de seguridad, gestionar transacciones y responder a las solicitudes de los clientes. La clave es que cada servidor puede ser autónomo en su gestión local, aunque coordinado con otros servidores para mantener la consistencia global de los datos. La comunicación entre los servidores es fundamental para garantizar la coherencia de los datos en un entorno distribuido.
    \item \textbf{Clientes}: Los clientes, que pueden ser aplicaciones o usuarios finales, acceden a los datos almacenados en los servidores a través de la red. El cliente envía peticiones (consultas, actualizaciones, etc.) al servidor que contiene los datos requeridos o a un intermediario que enruta la petición al servidor adecuado. Los clientes no necesitan conocer la ubicación física de los datos, ya que el sistema de gestión de base de datos distribuida se encarga de enrutar las peticiones y de proporcionar una vista unificada de la base de datos.  Los clientes deben estar diseñados para manejar la latencia inherente a la comunicación en red y, potencialmente, las fallas de conexión.
    \item \textbf{Arquitectura de tres niveles cliente/servidor}:  En esta arquitectura, que es una especialización de la arquitectura cliente-servidor, se introduce un nivel intermedio, a menudo conocido como capa de aplicación o capa de lógica de negocio.  El cliente se comunica con la capa de aplicación, que se encarga de procesar las peticiones, realizar validaciones y comunicarse con los servidores de bases de datos. Este diseño ofrece varias ventajas, como la separación de la lógica de negocio de la interfaz de usuario y la gestión de la base de datos, lo que facilita la escalabilidad, el mantenimiento y la reutilización del código. La capa intermedia puede optimizar las peticiones a la base de datos, almacenar en caché datos y asegurar el acceso.
\end{itemize}

\section{Sistemas Homogéneos vs. Heterogéneos}

Los sistemas de bases de datos distribuidas pueden clasificarse en función del software de gestión de bases de datos (SGBD) que utilizan los sitios participantes. Esta distinción es crucial para comprender los desafíos y las soluciones en el diseño y la implementación de sistemas distribuidos.

\begin{itemize}
    \item \textbf{Sistemas homogéneos}: En un sistema homogéneo, todos los sitios que participan en la base de datos distribuida utilizan el mismo software de SGBD.  Esto simplifica significativamente la gestión de la base de datos, ya que se eliminan las problemas de compatibilidad y la heterogeneidad en la implementación del protocolo. La homogeneidad facilita la replicación de datos, la optimización de consultas, la gestión de transacciones distribuidas y la aplicación de políticas de seguridad unificadas. Los sistemas homogéneos son más fáciles de diseñar, implementar y mantener, ya que la administración y el desarrollo se centralizan en un único SGBD.
    \item \textbf{Sistemas heterogéneos}: En un sistema heterogéneo, los diferentes sitios pueden utilizar diferentes SGBD. Esto puede ocurrir por varias razones, como la necesidad de integrar bases de datos existentes, la preferencia por un SGBD específico para un tipo de datos o aplicación, o la descentralización de la gestión de la base de datos. Los sistemas heterogéneos presentan desafíos significativos en términos de compatibilidad, interoperabilidad, traducción de datos y gestión de consultas distribuidas. La heterogeneidad requiere mecanismos de adaptación e integración que permitan que diferentes SGBD interactúen entre sí de forma transparente. Los sistemas heterogéneos, por ejemplo, pueden emplear  \textit{wrappers} o envolturas para traducir las peticiones y los datos entre los diferentes SGBD.  La gestión de transacciones distribuidas en un sistema heterogéneo es particularmente compleja, ya que es necesario coordinar los protocolos de transacción de los diferentes SGBD. La heterogeneidad semántica, donde los mismos datos pueden tener diferentes significados o representaciones en diferentes sistemas, es otro desafío importante en los sistemas heterogéneos.
\end{itemize}

\section{Sistemas Federados}

Los sistemas federados representan una forma avanzada de arquitectura de bases de datos distribuidas, donde múltiples sistemas de bases de datos autónomos participan en una base de datos distribuida.  En lugar de tener una base de datos centralizada o replicada, los sistemas federados se basan en la integración y el acceso unificado a sistemas de bases de datos existentes que mantienen su autonomía y control local.

\begin{itemize}
    \item \textbf{Múltiples sistemas de bases de datos autónomos}: Un sistema federado se compone de una colección de sistemas de bases de datos (SGBD) que funcionan de forma independiente y autónoma.  Cada sistema de base de datos conserva su propia administración, control, reglas de acceso y políticas de seguridad.  Los sistemas federados no intentan centralizar el control de los datos ni imponer una única estructura de datos.  La autonomía local es un principio fundamental en los sistemas federados, lo que significa que cada sitio puede gestionar sus propios datos y operaciones de forma independiente.
    \item \textbf{Desafíos en la gestión de la autonomía local y la heterogeneidad semántica}:  La gestión de la autonomía local presenta desafíos significativos en los sistemas federados.  Es necesario encontrar un equilibrio entre la autonomía de los sitios y la capacidad de ofrecer una vista unificada de los datos a los usuarios.  Esto implica la necesidad de mecanismos para traducir consultas, combinar datos de diferentes fuentes y gestionar las diferencias en los esquemas de datos. La heterogeneidad semántica es uno de los mayores desafíos en los sistemas federados.  Los diferentes sistemas de bases de datos pueden utilizar diferentes términos, definiciones y estructuras de datos para representar la misma información.  Resolver la heterogeneidad semántica requiere la creación de un esquema de datos global que defina la semántica de los datos en todo el sistema federado.  Esto a menudo implica la utilización de técnicas de mapeo de datos, la definición de ontologías y la aplicación de reglas de transformación de datos.  La gestión de las transacciones distribuidas también es compleja en los sistemas federados, ya que es necesario coordinar las transacciones en los diferentes sistemas autónomos y garantizar la consistencia global de los datos.
\end{itemize}