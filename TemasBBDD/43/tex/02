\chapter{Diseño Físico y Optimización del Almacenamiento}

\section{Organización de Archivos y Estructuras de Almacenamiento Interno}

En este apartado, exploraremos las técnicas fundamentales para la organización y gestión eficiente de los datos a nivel físico, centrándonos en la asignación de registros a archivos y bloques de disco, así como en las distintas estrategias de organización de archivos y la optimización del uso de la memoria intermedia.

\subsection{Asignación de registros a archivos y bloques de disco}

La eficiencia del acceso a los datos depende en gran medida de la manera en que los registros se asignan a los archivos y estos, a su vez, a los bloques de disco.  Este proceso implica decisiones cruciales sobre cómo se distribuyen los datos en el espacio de almacenamiento físico.  Consideraremos los siguientes aspectos:

\begin{itemize}
    \item \textbf{Tamaño del registro:} El tamaño de cada registro influye directamente en la cantidad de registros que pueden almacenarse en un bloque de disco.  Registros más grandes requieren más espacio por bloque, lo que potencialmente reduce la eficiencia en la lectura y escritura de datos.
    \item \textbf{Factor de bloqueo:}  El factor de bloqueo representa el número de registros almacenados en un bloque de disco.  Optimizar este factor es esencial para minimizar el número de accesos al disco necesarios para recuperar o modificar los datos.
    \item \textbf{Organización de bloques:}  La forma en que los bloques se organizan en el disco (contiguos, indexados, etc.) afecta significativamente el rendimiento de las operaciones de acceso. La organización contigua, por ejemplo, ofrece un acceso rápido a los datos secuenciales, pero puede ser problemático en entornos con actualizaciones frecuentes.
    \item \textbf{Distribución de datos en bloques:}  Existen diferentes estrategias para almacenar registros en bloques. Por ejemplo:
    \begin{itemize}
        \item \textbf{Registros de longitud fija:} En este caso, cada registro ocupa la misma cantidad de espacio en el disco. Esto simplifica la gestión de los datos y permite un acceso más rápido, pero puede desperdiciar espacio si algunos campos de los registros no se utilizan al máximo.
        \item \textbf{Registros de longitud variable:}  Los registros pueden tener diferentes tamaños, lo que optimiza el uso del espacio de almacenamiento, pero requiere una gestión más compleja, ya que se necesita información adicional (como punteros o delimitadores) para identificar la ubicación de cada registro.
    \end{itemize}
\end{itemize}

La elección de la estrategia de asignación óptima depende de las características de los datos, el tipo de consultas que se realizarán y las limitaciones del sistema de almacenamiento.

\subsection{Tipos de organización de archivos: desordenados, ordenados, dispersos}

La organización de archivos determina la forma en que los registros se almacenan físicamente en el disco, influyendo directamente en la eficiencia de las operaciones de acceso, inserción, actualización y eliminación.  A continuación, se describen los principales tipos de organización de archivos:

\begin{itemize}
    \item \textbf{Archivos desordenados (Heap Files):} En este tipo de organización, los registros se almacenan en el orden en que se insertan, sin ningún orden específico.
    \begin{itemize}
        \item \textbf{Ventajas:} Simplicidad en la inserción de nuevos registros (se añaden al final del archivo) y en la modificación (se sobrescriben en su lugar).
        \item \textbf{Desventajas:} Búsquedas lentas, ya que se requiere una exploración completa del archivo (escaneo lineal).  Las operaciones de ordenación son costosas.
        \item \textbf{Aplicaciones:} Útiles en sistemas con pocas consultas de búsqueda y muchas operaciones de inserción/actualización.  Ideal para la fase inicial de carga de datos.
    \end{itemize}
    \item \textbf{Archivos ordenados (Sorted Files):}  En este caso, los registros se almacenan ordenados según un atributo clave (clave de ordenación).
    \begin{itemize}
        \item \textbf{Ventajas:} Búsquedas rápidas usando búsqueda binaria, que reduce significativamente el tiempo de búsqueda.  Las operaciones de rango (por ejemplo, encontrar todos los registros con un valor de clave dentro de un rango) son eficientes.
        \item \textbf{Desventajas:} Inserciones y eliminaciones costosas, ya que se requiere mantener el orden del archivo, lo que puede implicar la reorganización de una gran cantidad de registros.  Las actualizaciones también pueden requerir ajustes en el orden.
        \item \textbf{Aplicaciones:} Adecuados para sistemas con muchas consultas de búsqueda y pocas actualizaciones, donde el orden de los datos es crítico para la eficiencia.
    \end{itemize}
    \item \textbf{Archivos dispersos (Hashed Files):} Utilizan una función \textit{hash} para determinar la ubicación de un registro en el disco.
    \begin{itemize}
        \item \textbf{Ventajas:}  Acceso directo y rápido a los registros, ya que la función \textit{hash} calcula directamente la ubicación del registro.
        \item \textbf{Desventajas:}  Puede sufrir colisiones (cuando dos o más registros producen el mismo valor \textit{hash}), que deben ser gestionadas (por ejemplo, usando encadenamiento).  El rendimiento depende de la calidad de la función \textit{hash} y de la gestión de colisiones.  Las operaciones de rango pueden ser ineficientes, dependiendo de la función \textit{hash}.
        \item \textbf{Aplicaciones:}  Son útiles cuando se requiere un acceso rápido a registros individuales y no son frecuentes las operaciones de rango.  Son comunes en sistemas de gestión de archivos y bases de datos.
    \end{itemize}
\end{itemize}

\subsection{Gestión de la memoria intermedia (buffer management)}

La gestión de la memoria intermedia (buffer management) es una técnica esencial para optimizar el rendimiento de las operaciones de acceso al disco.  La memoria intermedia (o buffer) es un área de memoria principal utilizada para almacenar temporalmente bloques de datos leídos del disco.  En lugar de leer y escribir datos directamente desde/hacia el disco para cada solicitud, el sistema gestiona un conjunto de bloques en memoria, minimizando así el número de accesos al disco, que son operaciones mucho más lentas.

\begin{itemize}
    \item \textbf{Funciones de la gestión de la memoria intermedia:}
    \begin{itemize}
        \item \textbf{Asignación de bloques:}  Cuando una operación requiere acceso a un bloque de datos, el sistema de gestión de la memoria intermedia verifica si el bloque ya está en el buffer. Si lo está, se utiliza la copia en memoria.  Si no, se lee el bloque del disco y se asigna un espacio en el buffer (si hay espacio disponible) o se reemplaza un bloque existente siguiendo una política de reemplazo.
        \item \textbf{Políticas de reemplazo:}  Las políticas de reemplazo determinan qué bloque se debe eliminar del buffer cuando se necesita espacio para un nuevo bloque. Las políticas más comunes son:
        \begin{itemize}
            \item \textbf{LRU (Least Recently Used):}  Reemplaza el bloque que se utilizó menos recientemente.  Es una política popular y generalmente efectiva.
            \item \textbf{MRU (Most Recently Used):} Reemplaza el bloque que se utilizó más recientemente. Puede ser útil en situaciones donde se accede a los bloques en un ciclo.
            \item \textbf{FIFO (First-In, First-Out):} Reemplaza el bloque que se ha cargado en el buffer durante más tiempo.  Simple, pero puede no ser óptima.
            \item \textbf{Clock:} Similar a LRU, pero utiliza un mecanismo de "reloj" para aproximar el uso reciente.  Es una buena alternativa a LRU.
        \end{itemize}
        \item \textbf{Escritura diferida (write-back):}  Los cambios realizados a un bloque en el buffer no se escriben inmediatamente en el disco.  En su lugar, se marcan como "sucios" y se escriben en el disco cuando el bloque se va a reemplazar (o en intervalos regulares). Esto reduce el número de operaciones de escritura al disco.
        \item \textbf{Preadido (read-ahead):} El sistema anticipa las necesidades de lectura de datos y precarga bloques en el buffer antes de que sean solicitados.  Esto puede ser útil en situaciones donde se espera un acceso secuencial a los datos.
    \end{itemize}
    \item \textbf{Consideraciones de implementación:}
    \begin{itemize}
        \item \textbf{Tamaño del buffer:} El tamaño del buffer es un factor crítico.  Un buffer más grande puede mejorar el rendimiento al reducir el número de accesos al disco, pero consume más memoria.  La elección del tamaño óptimo depende de la disponibilidad de memoria y de las características de las consultas.
        \item \textbf{Número de buffers:}  El sistema puede tener múltiples buffers para manejar las solicitudes de acceso de múltiples usuarios o procesos concurrentes.
        \item \textbf{Algoritmos de gestión:}  La implementación de la gestión de la memoria intermedia puede ser compleja, involucrando algoritmos para la asignación, reemplazo y sincronización de bloques.
    \end{itemize}
\end{itemize}

\section{Técnicas de Indexación para un Acceso Eficiente}

La indexación es una técnica fundamental para acelerar el acceso a los datos, similar a los índices de libros. En este apartado, profundizaremos en los conceptos básicos de indexación, los diferentes tipos de índices y las estructuras de datos empleadas para su implementación.

\subsection{Conceptos básicos de indexación y su analogía con los índices de libros}

La indexación es una técnica que permite acelerar el acceso a los registros de una base de datos o archivo al crear una estructura de datos adicional (el índice) que contiene información sobre la ubicación física de los registros, de manera similar a como un índice de un libro referencia las páginas donde se encuentra un tema específico.

\begin{itemize}
    \item \textbf{Clave de indexación:} Es el atributo o conjunto de atributos sobre el cual se crea el índice.  Por ejemplo, en una tabla de empleados, la clave de indexación podría ser el número de identificación del empleado (ID), el nombre o el apellido.
    \item \textbf{Registro de índice:} Cada registro del índice contiene el valor de la clave de indexación y un puntero (o referencia) a la ubicación física del registro correspondiente en el archivo de datos.
    \item \textbf{Funcionamiento:} Cuando se realiza una consulta que involucra la clave de indexación, el sistema utiliza el índice para encontrar rápidamente la ubicación del registro deseado. En lugar de escanear todo el archivo, el sistema solo necesita buscar en el índice, lo cual es mucho más rápido.
    \item \textbf{Analogía con los índices de libros:}
    \begin{itemize}
        \item \textbf{Libro:} Archivo de datos.
        \item \textbf{Palabra clave en el índice del libro:} Clave de indexación.
        \item \textbf{Número de página en el índice del libro:} Puntero al registro en el archivo de datos.
        \item \textbf{Búsqueda en el índice del libro:} Búsqueda en el índice.
        \item \textbf{Lectura de la página del libro:} Acceso al registro en el archivo de datos.
    \end{itemize}
\end{itemize}

\subsection{Tipos de índices: primarios, secundarios, densos, dispersos}

Existen diferentes tipos de índices, cada uno con sus propias características y usos:

\begin{itemize}
    \item \textbf{Índices primarios:} Se basan en el atributo clave principal (primary key) de la tabla o archivo.  Un índice primario determina el orden físico de los registros en el archivo de datos.
    \begin{itemize}
        \item \textbf{Denso:} Existe un registro de índice para cada registro en el archivo de datos.  La clave de indexación es el valor de la clave primaria y el puntero apunta a la ubicación física del registro.
        \item \textbf{Disperso:}  Solo se indexan algunos registros del archivo de datos, por ejemplo, el primer registro de cada bloque.  Esto reduce el tamaño del índice, pero la búsqueda puede requerir acceso a varios bloques.
    \end{itemize}
    \item \textbf{Índices secundarios:} Se basan en atributos que no son la clave primaria (por ejemplo, el nombre de un empleado o su departamento). No determinan el orden físico de los registros. Pueden existir múltiples índices secundarios sobre la misma tabla o archivo.
    \begin{itemize}
        \item \textbf{Denso:} Similar al índice primario denso, pero para una clave secundaria.  Existe un registro de índice para cada valor único del atributo indexado.  Puede haber múltiples registros de índice apuntando al mismo registro en el archivo de datos (si hay valores duplicados en el atributo indexado).
        \item \textbf{Disperso:} Similar al índice primario disperso, pero para una clave secundaria.  Existe un registro de índice solo para algunos valores del atributo indexado.
    \end{itemize}
    \item \textbf{Índices de agrupamiento (Clustering Indexes):} Son una forma de índice primario. Los registros se ordenan físicamente en el disco de acuerdo con los valores de la clave de indexación. Pueden mejorar el rendimiento de las consultas que involucran rangos de valores en la clave de indexación.
    \item \textbf{Índices multinivel (Multilevel Indexes):} Son una extensión de los índices primarios. Utilizan múltiples niveles de índices para mejorar el rendimiento de la búsqueda en archivos muy grandes. Los niveles superiores del índice apuntan a bloques del nivel inferior, hasta llegar a los punteros a los registros de datos.
\end{itemize}

\subsection{Estructuras de datos para índices: árboles B, árboles B+}

Para implementar eficientemente los índices, se utilizan estructuras de datos especializadas, principalmente árboles B y árboles B+.

\begin{itemize}
    \item \textbf{Árboles B:} Son árboles balanceados que optimizan las operaciones de búsqueda, inserción y eliminación en archivos de gran tamaño.  Los árboles B están diseñados para trabajar con grandes conjuntos de datos almacenados en disco.
    \begin{itemize}
        \item \textbf{Características clave:}
        \begin{itemize}
            \item \textbf{Balanceados:} Todos los nodos hoja se encuentran a la misma profundidad.
            \item \textbf{Grado del árbol (orden del árbol):}  Define el número máximo de hijos que puede tener cada nodo.
            \item \textbf{Nodos internos:}  Contienen claves de indexación y punteros a los nodos hijos.
            \item \textbf{Nodos hoja:} Contienen las claves de indexación y, en algunos casos, punteros a los registros de datos.
            \item \textbf{Operaciones:} Búsqueda, inserción y eliminación se realizan de manera eficiente (típicamente en tiempo logarítmico respecto al número de registros).
        \end{itemize}
        \item \textbf{Ventajas:}  Eficientes para búsquedas por rango y búsquedas individuales.  Permiten un buen rendimiento en operaciones de inserción y eliminación.
        \item \textbf{Desventajas:}  Puede ser más complejo de implementar que otras estructuras de índices.
    \end{itemize}
    \item \textbf{Árboles B+:}  Son una variante de los árboles B, ampliamente utilizados en bases de datos.  Los árboles B+ optimizan aún más las operaciones de acceso secuencial y por rango.
    \begin{itemize}
        \item \textbf{Características clave:}
        \begin{itemize}
            \item \textbf{Todas las claves en los nodos hoja:} Todas las claves de indexación y los punteros a los registros de datos (o punteros a registros) se almacenan en los nodos hoja.
            \item \textbf{Nodos internos con claves y punteros a nodos hijos:} Los nodos internos contienen claves de indexación para guiar la búsqueda, pero no almacenan datos.
            \item \textbf{Lista enlazada en los nodos hoja:} Los nodos hoja están enlazados entre sí en una lista enlazada.  Esto facilita las operaciones de acceso secuencial y por rango.
        \end{itemize}
        \item \textbf{Ventajas:}
        \begin{itemize}
            \item \textbf{Mejor rendimiento para búsquedas secuenciales:} Gracias a la lista enlazada en los nodos hoja.
            \item \textbf{Mayor factor de ramificación (branching factor):} Los nodos internos contienen solo claves y punteros, lo que permite almacenar más claves en cada nodo y reduce la profundidad del árbol.
            \item \textbf{Mayor eficiencia en el acceso a datos:}  El acceso a los datos siempre se realiza a través de los nodos hoja, lo que simplifica la gestión de la memoria intermedia.
        \end{itemize}
        \item \textbf{Desventajas:}  Puede ser más complejo que los árboles B en algunas implementaciones.
    \end{itemize}
\end{itemize}

\subsection{Consideraciones para la selección y creación de índices}

La selección y creación de índices es un proceso crítico que debe realizarse cuidadosamente para optimizar el rendimiento del sistema.  Se deben considerar los siguientes factores:

\begin{itemize}
    \item \textbf{Consultas frecuentes:} Identificar las consultas que se ejecutan con mayor frecuencia. Los índices deben crearse sobre los atributos utilizados en las cláusulas \texttt{WHERE}, \texttt{JOIN} y \texttt{ORDER BY} de estas consultas.
    \item \textbf{Tipo de consultas:} Analizar el tipo de consultas (búsquedas puntuales, búsquedas por rango, operaciones de unión).  Los árboles B+ son generalmente mejores para búsquedas por rango y secuenciales, mientras que los \textit{hash} pueden ser adecuados para búsquedas puntuales.
    \item \textbf{Cardinalidad de los atributos:} La cardinalidad de un atributo es el número de valores únicos que contiene.  Los índices son más efectivos en atributos con alta cardinalidad (muchos valores únicos).  Crear un índice en un atributo con baja cardinalidad (por ejemplo, un campo booleano) puede no ser beneficioso.
    \item \textbf{Coste de mantenimiento:}  Los índices requieren espacio de almacenamiento adicional y se deben actualizar cada vez que se insertan, actualizan o eliminan registros.  Crear demasiados índices puede degradar el rendimiento de las operaciones de escritura.
    \item \textbf{Consideraciones de almacenamiento:}  El tamaño del índice debe ser considerado. Índices muy grandes pueden afectar el rendimiento de la consulta si el índice no cabe en la memoria intermedia.
    \item \textbf{Pruebas y ajuste:}  Es fundamental probar el rendimiento del sistema con y sin índices, y ajustar la estrategia de indexación en función de los resultados.
\end{itemize}

\section{Optimización del Diseño Físico para el Rendimiento de Consultas}

El diseño físico de la base de datos, incluyendo la organización de archivos y los índices, tiene un impacto significativo en el rendimiento de las consultas.  En este apartado, examinaremos cómo la selección y organización física de los datos puede optimizarse para la combinación esperada de consultas, y las estrategias de reorganización.

\subsection{Impacto de la organización física en el coste de las consultas}

La organización física de los datos afecta directamente al coste de las consultas en términos de tiempo de respuesta y uso de recursos (e.g., operaciones de E/S).  Las siguientes consideraciones son esenciales:

\begin{itemize}
    \item \textbf{Acceso al disco:}  El acceso al disco es la operación más costosa.  La organización física que minimiza el número de accesos al disco para ejecutar una consulta, mejora el rendimiento.
    \item \textbf{Coste de I/O:} El costo de la entrada/salida (I/O) es directamente proporcional al número de bloques que deben leerse o escribirse.
    \begin{itemize}
        \item Una organización de archivo desordenada puede requerir el escaneo completo del archivo para una consulta, lo que implica el acceso a todos los bloques en el archivo.
        \item Un índice puede reducir significativamente el número de bloques accedidos al permitir una búsqueda directa de los registros deseados.
    \end{itemize}
    \item \textbf{Tiempo de procesamiento de CPU:} El tiempo de CPU para procesar los datos recuperados también es relevante.  La organización física puede afectar la cantidad de datos a procesar, y cómo se accede a ellos.
    \item \textbf{Uniones (Joins):}  Las operaciones de unión son costosas.  La organización física de las tablas involucradas en una unión puede afectar significativamente el rendimiento. Por ejemplo, crear índices en las columnas utilizadas para las operaciones de unión puede acelerar el proceso.
\end{itemize}

\subsection{Selección de la organización física adecuada para la combinación esperada de consultas}

La elección de la organización física adecuada para una base de datos es una tarea compleja que debe basarse en el análisis de la carga de trabajo, es decir, la combinación de consultas que se ejecutarán en el sistema.

\begin{itemize}
    \item \textbf{Análisis de la carga de trabajo:}  El primer paso es identificar las consultas más frecuentes y las operaciones que requieren (selección, actualización, inserción, eliminación, unión, etc.). Se debe analizar:
    \begin{itemize}
        \item \textbf{Frecuencia de cada consulta:}  Determinar la frecuencia con que se ejecuta cada consulta es clave para priorizar la optimización.
        \item \textbf{Atributos involucrados en las consultas:} Identificar los atributos que se utilizan en las cláusulas \texttt{WHERE}, \texttt{JOIN} y \texttt{ORDER BY}.
        \item \textbf{Cardinalidad de los atributos:} Conocer la cardinalidad de los atributos ayuda a determinar la efectividad de los índices.
    \end{itemize}
    \item \textbf{Selección de la organización de archivos:}
    \begin{itemize}
        \item \textbf{Archivos desordenados:} Adecuados para sistemas con muchas inserciones/actualizaciones y pocas consultas de búsqueda.
        \item \textbf{Archivos ordenados:}  Optimos para consultas que requieren búsquedas y operaciones de rango.
        \item \textbf{Archivos dispersos:}  Ideales para consultas que requieren búsquedas puntuales y rápidas.
    \end{itemize}
    \item \textbf{Creación de índices:}  Crear índices en los atributos que se utilizan en las cláusulas \texttt{WHERE}, \texttt{JOIN} y \texttt{ORDER BY} de las consultas más frecuentes. Elegir el tipo de índice (primario, secundario, árbol B+, \textit{hash}, etc.) en función de las características de las consultas y los atributos.
    \item \textbf{Optimización de la memoria intermedia:}  Configurar adecuadamente el tamaño y las políticas de reemplazo de la memoria intermedia para minimizar el número de accesos al disco.
    \item \textbf{Evaluación y ajuste:} Medir el rendimiento del sistema con la configuración elegida y ajustar la organización física (creación/eliminación de índices, cambios en la organización de archivos, etc.) en función de los resultados.
\end{itemize}

\subsection{Reorganización de índices y archivos}

Con el tiempo, las características de la carga de trabajo pueden cambiar, o la organización física inicial puede dejar de ser óptima debido a la acumulación de datos y las modificaciones. La reorganización de índices y archivos es un proceso esencial para mantener el rendimiento del sistema a lo largo del tiempo.

\begin{itemize}
    \item \textbf{Reorganización de índices:}
    \begin{itemize}
        \item \textbf{Reconstrucción de índices:}  Los índices pueden fragmentarse con el tiempo, lo que reduce su rendimiento. Reconstruir periódicamente los índices puede mejorar la eficiencia de la búsqueda.
        \item \textbf{Eliminación de índices innecesarios:}  Los índices que no se utilizan o que ya no son efectivos deben eliminarse para reducir el costo de mantenimiento y mejorar el rendimiento de las operaciones de escritura.
        \item \textbf{Creación de nuevos índices:}  Si la carga de trabajo cambia, puede ser necesario crear nuevos índices sobre atributos que se utilizan con frecuencia en las nuevas consultas.
    \end{itemize}
    \item \textbf{Reorganización de archivos:}
    \begin{itemize}
        \item \textbf{Reorganización de archivos ordenados:}  Si un archivo ordenado se ha actualizado con frecuencia, su orden físico puede degradarse. Se debe reorganizar para mantener el orden y optimizar las búsquedas.
        \item \textbf{Conversión de la organización de archivos:} En algunos casos, puede ser necesario convertir un archivo de una organización a otra (por ejemplo, de desordenado a ordenado) para adaptarse a una nueva carga de trabajo.
    \end{itemize}
    \item \textbf{Monitoreo y análisis continuo:}  El monitoreo continuo del rendimiento del sistema es crucial para identificar problemas de rendimiento y determinar cuándo es necesario reorganizar los índices y archivos.  Se deben recopilar estadísticas sobre el uso de los índices, el tiempo de respuesta de las consultas y el número de accesos al disco.
\end{itemize}
```